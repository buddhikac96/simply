program(libImportSection, globalSection, functionSection) ::= <<
import java.io.*;
import java.util.ArrayList;
<libImportSection>

public class Main {
    <globalSection>
    <functionSection>
}
>>

libImport(libList) ::= "<libList:imports()>"
imports(libName) ::= "import <libName>;  <\n>"

varDec(constant, type, identifier, val) ::= "<constant><type> <identifier><varInit(val)>; <\n>"
varInit(val) ::= "<if(val)> = <val><endif>"
arrayDec(type, identifier, isEmptyInit, values) ::= "ArrayList\<<type>> <identifier> = new ArrayList\<<type>>(<arrayInit(isEmptyInit, values)>); <\n>"
arrayInit(isEmptyInit, values) ::= "<if(!isEmptyInit)>Arrays.asList(<values>)<endif>"

varAssign(identifier, assignOperator, val) ::= "<identifier> <assignOperator> <val>; <\n>"
arrAssign(identifier, val) ::= "<identifier>.add(<val>); <\n>"
arrayAccess(identifier, index) ::= "<identifier>.get(<index>)"

funcDec(isMain, name, parameterList, body, returnType, isList) ::= <<
<if(isMain)>public static void main(String[] args) {
    <body>
} <\n>
<else>
public static <returnType><list(isList)> <name>(<parameterList>){
    <body>
} <\n>
<endif>
>>

list(isList) ::= "<if(isList)>[]<endif>"
parameter(type, identifier, isList) ::=  "<if(!isList)><type>[] <identifier><else><type> <identifier><endif>"

print(content) ::= "System.out.println(<content>); <\n>"
libFuncCall(libRef, funcName, parameters) ::= "<libRef>.<funcName>(<parameters>)"
funcCall(funcName, parameters) ::= "<funcName>(<parameters>)"

arithmeticStmt(lhs, operator, rhs) ::= "<lhs> <operator> <rhs>"
returnStmt(content) ::= "return <content>;"

ifStmt(ifBlock, elseIfBlock, elseBlock) ::= "<ifBlock><elseIfBlock><elseBlock><\n>"
ifBlock(condition, body) ::= <<
if(<condition>){
    <body>
}
>>
elseBlock(body) ::= <<
else{
    <body>
}
>>
conditionStmt(lhs, operator, rhs) ::= "<lhs> <operator> <rhs>"
notCondition(condition) ::= "!<condition>"

loopStmt(loop, body) ::= <<
<loop> {
    <body>
} <\n>
>>

modifiedForLoop(init, controlVar, start, end, isPositive, isReverse, stepVal) ::= "for(<init> = <start>; <controlVar><relationalOperator(isReverse)><end>; <controlVar><incDec(isPositive)><stepVal>)"
relationalOperator(isReverse) ::= "<if(isReverse)>>=<else>\<=<endif>"
incDec(isPos) ::= "<if(isPos)>+=<else>-=<endif>"
whileLoop(condition) ::= "while(<condition>)"
forEachLoop(dataType, iterator, arrName) ::= "for(<dataType> <iterator>:<arrName>)"
loopController(loopControl) ::= "<loopControl>;"
