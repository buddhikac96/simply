program(libImportSection, globalSection, functionSection, body) ::= <<
<libImportSection>
public class Main {
    <globalSection>
    <functionSection>
}
>>

libImport(libList) ::= "<libList:imports()>"
imports(libName) ::= "import <libName>;  <\n>"

varDec(constant, type, identifier, val) ::= "<constant><type> <identifier><varInit(val)>; <\n>"
varInit(val) ::= "<if(val)> = <val><endif>"
arraysDec(constant, type, identifier) ::= "<constant><type>[] <identifier>;  <\n>"
arraysDecInit(constant, type, identifier, values) ::= "<constant><type>[] <identifier> = { <values> }; <\n>"

varAssign(identifier, assignOperator, val) ::= "<identifier> <assignOperator> <val>; <\n>"
arrayAssign(arrayAccess, assignOperator, val) ::= "<arrayAccess> <assignOperator> <val>; <\n>"
arrayAccess(identifier, index) ::= "<identifier>[<index>]"

funcDec(isMain, name, parameterList, body, returnType) ::= <<
<if(isMain)>public static void main(String[] args) {
    <body>
}
<else>
public <returnType> <name>(<parameterList>){
    <body>
}
<endif>
>>

parameter(type, identifier, isList) ::=  "<if(!isList)><type>[] <identifier><else><type> <identifier><endif>"

print(content) ::= "System.out.println(<content>); <\n>"
funcCall(libRef, funcName, parameters) ::= "<libRef>.<funcName>(<parameters>);"

arithmeticStmt(lhs, operator, rhs) ::= "<lhs> <operator> <rhs>"
returnStmt(content) ::= "return <content>;"
